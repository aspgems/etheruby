require_relative '../lib/etheruby'

class FooInstance
  include Etheruby::ContractInstance

  contract_method :bar do
    parameters array(:fixed128x128, 2)
  end

  contract_method :baz do
    parameters :uint32, :bool
    returns :bool
  end

  contract_method :sam do
    parameters :bytes, :bool, array(:uint256)
    returns :bool
  end

  contract_method :f do
    parameters :uint256, array(:uint32), :bytes10, :bytes
  end

  contract_method :mas do
    parameters :bytes,  array(:uint256, 2), :bool
  end
end

describe FooInstance do

  # See : https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI#examples
  let (:contract_instance) { described_class.new(0x1234567898766543214256787654321345678) }
  it 'parses bar correctly' do
    call = {
      to: "0x0001234567898766543214256787654321345678",
      data: "0xab55044d00000000000000000000000000000002200000000000000000000000000000000000000000000000000000000000000880000000000000000000000000000000"
    }
    expect(contract_instance).to receive(:call_api).with(call) do
      { 'result' => '0x' }
    end
    contract_instance.bar([2.125, 8.5])
  end

  it 'parses baz correctly' do
    call = {
      to: "0x0001234567898766543214256787654321345678",
      data: "0xcdcd77c000000000000000000000000000000000000000000000000000000000000000450000000000000000000000000000000000000000000000000000000000000001"
    }
    expect(contract_instance).to receive(:call_api).with(call) do
      {'result'=>'0x0000000000000000000000000000000000000000000000000000000000000000'}
    end
    expect(contract_instance.baz(69,true)).to eq(false)
  end

  it 'parses sam correctly' do
    call = {
      to: "0x0001234567898766543214256787654321345678",
      data: "0xa5643bf20000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000464617665000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003"
    }
    expect(contract_instance).to receive(:call_api).with(call) do
      {'result'=>'0x0000000000000000000000000000000000000000000000000000000000000000'}
    end
    contract_instance.sam("dave".codepoints, true, [1,2,3])
  end

  it 'parses f correctly' do
    call = {
      to: "0x0001234567898766543214256787654321345678",
      data: "0x8be6524600000000000000000000000000000000000000000000000000000000000001230000000000000000000000000000000000000000000000000000000000000080313233343536373839300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000004560000000000000000000000000000000000000000000000000000000000000789000000000000000000000000000000000000000000000000000000000000000d48656c6c6f2c20776f726c642100000000000000000000000000000000000000"
    }
    expect(contract_instance).to receive(:call_api).with(call) do
      {'result'=>'0x'}
    end
    contract_instance.f(0x123, [0x456, 0x789], "1234567890".codepoints, "Hello, world!".codepoints)
  end

  it 'parses mas correctly' do
    call = {
      to: "0x0001234567898766543214256787654321345678",
      data: "0x498e53bd000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000046461766500000000000000000000000000000000000000000000000000000000"
    }
    expect(contract_instance).to receive(:call_api).with(call) do
      {'result'=>'0x'}
    end
    contract_instance.mas("dave".codepoints, [1,2], true)
  end

end
